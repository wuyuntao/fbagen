// Automatically generated by fbagen, do not modify
using FlatBuffers;
using FlatBuffers.Schema;
using System;

namespace MyGame.Schema.Mutable
{
    public partial struct Vec3
    {
        public float X;

        public float Y;

        public float Z;

    }

    public partial class Monster
    {
        public uint Id { get; set; }

        public Vec3 Pos { get; set; }

        public short Mana { get; set; }

        public short Hp { get; set; }

        public string Name { get; set; }

        public byte[] Inventory { get; set; }

        public Color Color { get; set; }

        // Any test is not implemented yet

    }

    public partial class Weapon
    {
        public uint Id { get; set; }

        public string[] Tags { get; set; }

    }

    public partial class Pickup
    {
        public uint Id { get; set; }

    }

    public partial class Scene
    {
        public Monster[] Monsters { get; set; }

    }

}

namespace MyGame.Schema.Serialization
{
    public class Vec3Serializer : Serializer<MyGame.Schema.Mutable.Vec3, Vec3>
    {
        public static readonly Vec3Serializer Instance = SerializerSet.Instance.CreateSerializer<Vec3Serializer, MyGame.Schema.Mutable.Vec3, Vec3>();

        public override Offset<Vec3> Serialize(FlatBufferBuilder fbb, MyGame.Schema.Mutable.Vec3 obj)
        {
            return Vec3.CreateVec3(fbb, obj.X, obj.Y, obj.Z);        }

        protected override Vec3 GetRootAs(ByteBuffer buffer)
        {
            throw new NotImplementedException();
        }

        public override MyGame.Schema.Mutable.Vec3 Deserialize(Vec3 obj)
        {
            var accessor = new MyGame.Schema.Mutable.Vec3();
            accessor.X = obj.X;
            accessor.Y = obj.Y;
            accessor.Z = obj.Z;
            return accessor;
        }
    }

    public class MonsterSerializer : Serializer<MyGame.Schema.Mutable.Monster, Monster>
    {
        public static readonly MonsterSerializer Instance = SerializerSet.Instance.CreateSerializer<MonsterSerializer, MyGame.Schema.Mutable.Monster, Monster>();

        public override Offset<Monster> Serialize(FlatBufferBuilder fbb, MyGame.Schema.Mutable.Monster obj)
        {
            Monster.StartMonster(fbb);
            Monster.AddId(fbb, obj.Id);
            Monster.AddPos(fbb, Vec3Serializer.Instance.Serialize(fbb, obj.Pos));
            Monster.AddMana(fbb, obj.Mana);
            Monster.AddHp(fbb, obj.Hp);
            if (!string.IsNullOrEmpty(obj.Name))
                 Monster.AddName(fbb, fbb.CreateString(obj.Name));
            Monster.AddInventory(fbb, Monster.CreateInventoryVector(fbb, obj.Inventory));
            Monster.AddColor(fbb, obj.Color);
            // Any Test is not implemented yet
            return Monster.EndMonster(fbb);
        }

        protected override Monster GetRootAs(ByteBuffer buffer)
        {
            return Monster.GetRootAsMonster(buffer);
        }

        public override MyGame.Schema.Mutable.Monster Deserialize(Monster obj)
        {
            var accessor = new MyGame.Schema.Mutable.Monster();
            accessor.Id = obj.Id;
            accessor.Pos = Vec3Serializer.Instance.Deserialize(obj.Pos);
            accessor.Mana = obj.Mana;
            accessor.Hp = obj.Hp;
            accessor.Name = obj.Name;
            accessor.Inventory = DeserializeScalar(obj.InventoryLength, obj.Inventory);
            accessor.Color = obj.Color;
            // Any Test is not implemented yet
            return accessor;
        }
    }

    public class WeaponSerializer : Serializer<MyGame.Schema.Mutable.Weapon, Weapon>
    {
        public static readonly WeaponSerializer Instance = SerializerSet.Instance.CreateSerializer<WeaponSerializer, MyGame.Schema.Mutable.Weapon, Weapon>();

        public override Offset<Weapon> Serialize(FlatBufferBuilder fbb, MyGame.Schema.Mutable.Weapon obj)
        {
            Weapon.StartWeapon(fbb);
            Weapon.AddId(fbb, obj.Id);
            Weapon.AddTags(fbb, Weapon.CreateTagsVector(fbb, SerializeString(fbb, obj.Tags)));
            return Weapon.EndWeapon(fbb);
        }

        protected override Weapon GetRootAs(ByteBuffer buffer)
        {
            return Weapon.GetRootAsWeapon(buffer);
        }

        public override MyGame.Schema.Mutable.Weapon Deserialize(Weapon obj)
        {
            var accessor = new MyGame.Schema.Mutable.Weapon();
            accessor.Id = obj.Id;
            accessor.Tags = DeserializeScalar(obj.TagsLength, obj.Tags);
            return accessor;
        }
    }

    public class PickupSerializer : Serializer<MyGame.Schema.Mutable.Pickup, Pickup>
    {
        public static readonly PickupSerializer Instance = SerializerSet.Instance.CreateSerializer<PickupSerializer, MyGame.Schema.Mutable.Pickup, Pickup>();

        public override Offset<Pickup> Serialize(FlatBufferBuilder fbb, MyGame.Schema.Mutable.Pickup obj)
        {
            Pickup.StartPickup(fbb);
            Pickup.AddId(fbb, obj.Id);
            return Pickup.EndPickup(fbb);
        }

        protected override Pickup GetRootAs(ByteBuffer buffer)
        {
            return Pickup.GetRootAsPickup(buffer);
        }

        public override MyGame.Schema.Mutable.Pickup Deserialize(Pickup obj)
        {
            var accessor = new MyGame.Schema.Mutable.Pickup();
            accessor.Id = obj.Id;
            return accessor;
        }
    }

    public class SceneSerializer : Serializer<MyGame.Schema.Mutable.Scene, Scene>
    {
        public static readonly SceneSerializer Instance = SerializerSet.Instance.CreateSerializer<SceneSerializer, MyGame.Schema.Mutable.Scene, Scene>();

        public override Offset<Scene> Serialize(FlatBufferBuilder fbb, MyGame.Schema.Mutable.Scene obj)
        {
            Scene.StartScene(fbb);
            Scene.AddMonsters(fbb, Scene.CreateMonstersVector(fbb, MonsterSerializer.Instance.Serialize(fbb, obj.Monsters)));
            return Scene.EndScene(fbb);
        }

        protected override Scene GetRootAs(ByteBuffer buffer)
        {
            return Scene.GetRootAsScene(buffer);
        }

        public override MyGame.Schema.Mutable.Scene Deserialize(Scene obj)
        {
            var accessor = new MyGame.Schema.Mutable.Scene();
            accessor.Monsters = MonsterSerializer.Instance.Deserialize(obj.MonstersLength, obj.Monsters);
            return accessor;
        }
    }

}
